{"version":3,"sources":["webpack:///./node_modules/moment-mini/locale sync ^\\.\\/.*$","webpack:///./js/MermaidPlugin.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","window","mermaidAPI","initialize","startOnLoad","logLevel","theme","chartCounter","mermaidChart","mermaidError","parseError","error","parse","tempElement","document","createElement","body","appendChild","graph","render","removeChild","MermaidPlugin","md","originalRenderer","renderer","rules","fence","bind","tokens","idx","options","env","slf","token","content","trim","info","firstLine","split","match"],"mappings":"+KAAA,IAAIA,EAAM,CACT,WAAY,IACZ,cAAe,KAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,iCCvBpB,oFASAY,OAAW,GAAI,EAEf,IAAQC,WAAWC,WAAW,CAC1BC,aAAa,EACbC,SAAU,EACVC,MAAO,WAGX,IAAIC,EAAe,EAEbC,EAAe,SAACb,GAClB,IAAIc,EAA8B,KAIlC,GAHA,IAAQC,WAAa,SAACC,GAClBF,EAAeE,GAEf,IAAQC,MAAMjB,IAA0B,OAAjBc,EAAuB,CAC9C,IAAMI,EAAcC,SAASC,cAAc,OAE3CD,SAASE,KAAKC,YAAYJ,GAC1B,IAAMK,EAAQ,IAAQhB,WAAWiB,OAAO,SAASZ,IAAkBZ,GAAM,cACtEkB,GAEH,OADAC,SAASE,KAAKI,YAAYP,GACrBK,EAGE,wBAAwBA,EAAK,SAFzB,kCAIX,MAAO,QAAQT,EAAY,UAItBY,EAAgB,SAACC,GAC1B,IAAMC,EAAmBD,EAAGE,SAASC,MAAMC,MAAMC,KAAKL,EAAGE,SAASC,OAClEH,EAAGE,SAASC,MAAMC,MAAQ,SAACE,EAAiBC,EAAaC,EAASC,EAAKC,GACnE,IAAMC,EAAQL,EAAOC,GACflC,EAAOsC,EAAMC,QAAQC,OAC3B,GAAmB,YAAfF,EAAMG,KACN,OAAO5B,EAAab,GAExB,IAAM0C,EAAY1C,EAAK2C,MAAM,MAAM,GAAGH,OACtC,MAAkB,UAAdE,GAAuC,oBAAdA,GAAmCA,EAAUE,MAAM,gCACrE/B,EAAab,GAEjB4B,EAAiBK,EAAQC,EAAKC,EAASC,EAAKC","file":"5.editor.js","sourcesContent":["var map = {\n\t\"./locale\": 231,\n\t\"./locale.js\": 231\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 590;","// based on https://github.com/tylingsoft/markdown-it-mermaid\n\nimport MarkdownIt from \"markdown-it\";\nimport Token from 'markdown-it/lib/token';\nimport mermaid from 'mermaid';\n\n// workaround missing import in dependency\n// see: https://github.com/tylingsoft/dagre-d3-renderer/pull/1\nimport * as d3 from 'd3';\nwindow['d3'] = d3;\n\nmermaid.mermaidAPI.initialize({\n    startOnLoad: true,\n    logLevel: 3,\n    theme: 'forest'\n});\n\nlet chartCounter = 0;\n\nconst mermaidChart = (code: string): string => {\n    let mermaidError: string | null = null;\n    mermaid.parseError = (error: string) => {\n        mermaidError = error\n    };\n    if (mermaid.parse(code) || mermaidError === null) {\n        const tempElement = document.createElement('div');\n        // tempElement.classList.add('hidden');\n        document.body.appendChild(tempElement);\n        const graph = mermaid.mermaidAPI.render(`chart_${chartCounter++}`, code, () => {\n        }, tempElement);\n        document.body.removeChild(tempElement);\n        if (!graph) {\n            return `<pre>Error creating graph</pre>`\n        }\n        return `<div class=\"mermaid\">${graph}</div>`\n    } else {\n        return `<pre>${mermaidError}</pre>`\n    }\n};\n\nexport const MermaidPlugin = (md: MarkdownIt) => {\n    const originalRenderer = md.renderer.rules.fence.bind(md.renderer.rules);\n    md.renderer.rules.fence = (tokens: Token[], idx: number, options, env, slf) => {\n        const token = tokens[idx];\n        const code = token.content.trim();\n        if (token.info === 'mermaid') {\n            return mermaidChart(code);\n        }\n        const firstLine = code.split(/\\n/)[0].trim();\n        if (firstLine === 'gantt' || firstLine === 'sequenceDiagram' || firstLine.match(/^graph (?:TB|BT|RL|LR|TD);?$/)) {\n            return mermaidChart(code);\n        }\n        return originalRenderer(tokens, idx, options, env, slf);\n    }\n};\n"],"sourceRoot":""}