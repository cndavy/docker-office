{"version":3,"sources":["webpack:///./node_modules/markdown-it-texmath/texmath.js"],"names":["texmath","md","options","delimiters","macros","rules","rule","inline","ruler","before","name","renderer","tokens","idx","tmpl","replace","render","content","block","info","applyRule","str","beg","inBlockquote","pre","match","post","rex","lastIndex","startsWith","tag","exec","includes","state","silent","res","src","pos","token","push","markup","begLine","endLine","bMarks","tShift","parentType","length","line","endpos","eMarks","tex","displayMode","katex","renderToString","throwOnError","err","message","use","$_pre","prv","charCodeAt","$_post","end","nxt","brackets","gitlab","julia","kramdown","dollars","module","exports"],"mappings":"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","file":"6.editor.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Stefan Goessner - 2017-19. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\nfunction texmath(md,options) {\r\n    let delimiters = options && options.delimiters || 'dollars',\r\n        macros = options && options.macros;\r\n\r\n    if (delimiters in texmath.rules) {\r\n        for (let rule of texmath.rules[delimiters].inline) {\r\n            md.inline.ruler.before('escape', rule.name, texmath.inline(rule));  // ! important\r\n            md.renderer.rules[rule.name] = (tokens, idx) => rule.tmpl.replace(/\\$1/,texmath.render(tokens[idx].content,false,macros));\r\n        }\r\n\r\n        for (let rule of texmath.rules[delimiters].block) {\r\n            md.block.ruler.before('fence', rule.name, texmath.block(rule));\r\n            md.renderer.rules[rule.name] = (tokens, idx) => rule.tmpl.replace(/\\$2/,tokens[idx].info)  // equation number .. ?\r\n                                                                     .replace(/\\$1/,texmath.render(tokens[idx].content,true,macros));\r\n        }\r\n    }\r\n}\r\n\r\ntexmath.applyRule = function(rule, str, beg, inBlockquote) {\r\n    let pre, match, post;\r\n    rule.rex.lastIndex = beg;\r\n\r\n    pre = str.startsWith(rule.tag,beg) && (!rule.pre || rule.pre(str,beg));\r\n    match = pre && rule.rex.exec(str);\r\n    if (match) {\r\n        match.lastIndex = rule.rex.lastIndex;\r\n        post = (!rule.post || rule.post(str, match.lastIndex-1))  // valid post-condition\r\n            && (!inBlockquote || !match[1].includes('\\n'));       // remove evil blockquote bug (https://github.com/goessner/mdmath/issues/50)\r\n    }\r\n    rule.rex.lastIndex = 0;\r\n\r\n    return post && match;\r\n}\r\n\r\n// texmath.inline = (rule) => dollar;  // just for testing ..\r\n\r\ntexmath.inline = (rule) => \r\n    function(state, silent) {\r\n        let res = texmath.applyRule(rule, state.src, state.pos);\r\n        if (res) {\r\n            if (!silent) {\r\n                let token = state.push(rule.name, 'math', 0);\r\n                token.content = res[1];  // group 1 from regex ..\r\n                token.markup = rule.tag;\r\n            }\r\n            state.pos = res.lastIndex;\r\n        }\r\n        return !!res;\r\n    }\r\n\r\ntexmath.block = (rule) => \r\n    function(state, begLine, endLine, silent) {\r\n        let res = texmath.applyRule(rule, state.src, state.bMarks[begLine] + state.tShift[begLine], state.parentType==='blockquote');\r\n        if (res) {\r\n            if (!silent) {\r\n                let token = state.push(rule.name, 'math', 0);\r\n                token.block = true;\r\n                token.content = res[1];\r\n                token.info = res[res.length-1];\r\n                token.markup = rule.tag;\r\n            }\r\n            for (let line=begLine, endpos=res.lastIndex-1; line < endLine; line++)\r\n                if (endpos >= state.bMarks[line] && endpos <= state.eMarks[line]) { // line for end of block math found ...\r\n                    state.line = line+1;\r\n                    break;\r\n                }\r\n            state.pos = res.lastIndex;\r\n        }\r\n        return !!res;\r\n    }\r\n\r\ntexmath.render = function(tex,displayMode,macros) {\r\n    let res;\r\n    try {\r\n        res = texmath.katex.renderToString(tex,{throwOnError:false,displayMode,macros});\r\n    }\r\n    catch(err) {\r\n        res = tex+\": \"+err.message.replace(\"<\",\"&lt;\");\r\n    }\r\n    return res;\r\n}\r\n\r\ntexmath.use = function(katex) {  // math renderer used ...\r\n    texmath.katex = katex;       // ... katex solely at current ...\r\n    return texmath;\r\n}\r\n\r\n/*\r\nfunction dollar(state, silent) {\r\n  var start, max, marker, matchStart, matchEnd, token,\r\n      pos = state.pos,\r\n      ch = state.src.charCodeAt(pos);\r\n\r\n  if (ch !== 0x24) { return false; }  // $\r\n\r\n  start = pos;\r\n  pos++;\r\n  max = state.posMax;\r\n\r\n  while (pos < max && state.src.charCodeAt(pos) === 0x24) { pos++; }\r\n\r\n  marker = state.src.slice(start, pos);\r\n\r\n  matchStart = matchEnd = pos;\r\n\r\n  while ((matchStart = state.src.indexOf('$', matchEnd)) !== -1) {\r\n    matchEnd = matchStart + 1;\r\n\r\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x24) { matchEnd++; }\r\n\r\n    if (matchEnd - matchStart === marker.length) {\r\n      if (!silent) {\r\n        token         = state.push('math_inline', 'math', 0);\r\n        token.markup  = marker;\r\n        token.content = state.src.slice(pos, matchStart)\r\n                                 .replace(/[ \\n]+/g, ' ')\r\n                                 .trim();\r\n      }\r\n      state.pos = matchEnd;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (!silent) { state.pending += marker; }\r\n  state.pos += marker.length;\r\n  return true;\r\n};\r\n*/\r\n\r\ntexmath.$_pre = (str,beg) => {\r\n    let prv = beg > 0 ? str[beg-1].charCodeAt(0) : false;\r\n    return !prv || prv !== 0x5c                // no backslash,\r\n                && (prv < 0x30 || prv > 0x39); // no decimal digit .. before opening '$'\r\n}\r\ntexmath.$_post = (str,end) => {\r\n    let nxt = str[end+1] && str[end+1].charCodeAt(0);\r\n    return !nxt || nxt < 0x30 || nxt > 0x39;   // no decimal digit .. after closing '$'\r\n}\r\n\r\ntexmath.rules = {\r\n    brackets: {\r\n        inline: [ \r\n            {   name: 'math_inline',\r\n                rex: /\\\\\\((.+?)\\\\\\)/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '\\\\('\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /\\\\\\[(((?!\\\\\\]|\\\\\\[)[\\s\\S])+?)\\\\\\]\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '\\\\['\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /\\\\\\[([\\s\\S]+?)\\\\\\]/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '\\\\['\r\n            }\r\n        ]\r\n    },\r\n    gitlab: {\r\n        inline: [ \r\n            {   name: 'math_inline',\r\n                rex: /\\$`(.+?)`\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$`'\r\n            }\r\n        ],\r\n        block: [ \r\n            {   name: 'math_block_eqno',\r\n                rex: /`{3}math\\s+?([^`]+?)\\s+?`{3}\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '```math'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /`{3}math\\s+?([^`]+?)\\s+?`{3}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '```math'\r\n            }\r\n        ]\r\n    },\r\n    julia: {\r\n        inline: [ \r\n            {   name: 'math_inline', \r\n                rex: /`{2}([^`]+?)`{2}/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '``'\r\n            },\r\n            {   name: 'math_inline', \r\n                rex: /\\$(\\S[^$\\r\\n]*?[^\\s\\\\]{1}?)\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$',\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post\r\n            },\r\n            {   name: 'math_single',\r\n                rex: /\\$([^$\\s\\\\]{1}?)\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$',\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /`{3}math\\s+?([^`]+?)\\s+?`{3}\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '```math'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /`{3}math\\s+?([^`]+?)\\s+?`{3}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '```math'\r\n            }\r\n        ]\r\n    },\r\n    kramdown: {\r\n        inline: [ \r\n            {   name: 'math_inline', \r\n                rex: /\\${2}([^$\\r\\n]*?)\\${2}/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$$'\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /\\${2}([^$]*?)\\${2}\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '$$'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /\\${2}([^$]*?)\\${2}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '$$'\r\n            }\r\n        ]\r\n    },\r\n    dollars: {\r\n        inline: [ \r\n            {   name: 'math_inline', \r\n                rex: /\\$(\\S[^$\\r\\n]*?[^\\s\\\\]{1}?)\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$',\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post\r\n            },\r\n            {   name: 'math_single',\r\n                rex: /\\$([^$\\s\\\\]{1}?)\\$/gy,\r\n                tmpl: '<eq>$1</eq>',\r\n                tag: '$',\r\n                pre: texmath.$_pre,\r\n                post: texmath.$_post\r\n            }\r\n        ],\r\n        block: [\r\n            {   name: 'math_block_eqno',\r\n                rex: /\\${2}([^$]*?)\\${2}\\s*?\\(([^)$\\r\\n]+?)\\)/gmy,\r\n                tmpl: '<section class=\"eqno\"><eqn>$1</eqn><span>($2)</span></section>',\r\n                tag: '$$'\r\n            },\r\n            {   name: 'math_block',\r\n                rex: /\\${2}([^$]*?)\\${2}/gmy,\r\n                tmpl: '<section><eqn>$1</eqn></section>',\r\n                tag: '$$'\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nif (typeof module === \"object\" && module.exports)\r\n   module.exports = texmath;"],"sourceRoot":""}